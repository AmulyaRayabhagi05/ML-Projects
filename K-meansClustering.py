# -*- coding: utf-8 -*-
"""Assignment3_Part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wr7v6YH3H7rBwQsR1_Y_n_FkmdL65eqC
"""



#importing
import re
import random
from collections import defaultdict

# Preprocess the data

def preprocess_tweet(line):
    try:
        tweet = line.strip().split("|", maxsplit=2)[-1]
        tweet = re.sub(r"@\w+", "", tweet)
        tweet = re.sub(r"#", "", tweet)
        tweet = re.sub(r"http\S+", "", tweet)
        tweet = tweet.lower()
        words = set(re.findall(r'\b\w+\b', tweet))
        return words if words else None
    except:
        return None

def load_tweets(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()
    return [preprocess_tweet(line) for line in lines if preprocess_tweet(line)]

#Jaccard Distance
def jaccard_distance(set1, set2):
    intersection = set1 & set2
    union = set1 | set2
    return 1 - len(intersection) / len(union) if union else 1

#Compute Centeroid
def compute_centroid(cluster):
    min_total_dist = float("inf")
    best = None
    for candidate in cluster:
        total_dist = sum(jaccard_distance(candidate, other) for other in cluster)
        if total_dist < min_total_dist:
            min_total_dist = total_dist
            best = candidate
    return best

#Kmeans clustering
def kmeans_jaccard(tweets, k, max_iters=10):
    centers = random.sample(tweets, k)
    for _ in range(max_iters):
        clusters = defaultdict(list)
        for tweet in tweets:
            distances = [jaccard_distance(tweet, centers) for centers in centers]
            min_index = distances.index(min(distances))
            clusters[min_index].append(tweet)
        new_centroids = [compute_centroid(clusters[i]) for i in range(k)]
        if new_centroids == centers:
            break
        centers = new_centroids
    return clusters, centers

#SSE Calculations
def compute_sse(clusters, centers):
    sse = 0
    for i, cluster in clusters.items():
        for tweet in cluster:
            dist = jaccard_distance(tweet, centers[i])
            sse += dist ** 2
    return sse

#Main
def main():
    file_path = "/content/usnewshealth.txt"
    tweets = load_tweets(file_path)
    k_values = [3, 5, 7, 10, 12]
    print(f"{'K':<5} {'SSE':<10} Cluster Sizes")
    for k in k_values:
        clusters, centers = kmeans_jaccard(tweets, k)
        sse = compute_sse(clusters, centers)
        sizes = [len(clusters[i]) for i in range(k)]
        print(f"{k:<5} {sse:<10.2f} {sizes}")

main()